jQuery
江湖传言，全世界大约有80~90%的网站直接或间接地使用了jQuery。鉴于它如此流行，又如此好用，所以每一个入门JavaScript的前端工程师都应该了解和学习它。

jQuery这么流行，肯定是因为它解决了一些很重要的问题。实际上，jQuery能帮我们干这些事情：

1.消除浏览器差异：你不需要自己写冗长的代码来针对不同的浏览器来绑定事件，编写AJAX等代码；

2.简洁的操作DOM的方法：写$('#test')肯定比document.getElementById('test')来得简洁；

3.轻松实现动画、修改CSS等各种操作。

jQuery的理念“Write Less, Do More“，让你写更少的代码，完成更多的工作！



使用jQuery

使用jQuery只需要在页面的<head>引入jQuery文件即可：
<html>
<head>
    <script src="//code.jquery.com/jquery-1.11.3.min.js"></script>
    ...
</head>
<body>
    ...
</body>
</html>

注：引用jQuery后，再编写js文件，就可以使用$符号了。


$符号  ———— jQuery的替代符

$是著名的jQuery符号。实际上，jQuery把所有功能全部封装在一个全局变量jQuery中，而$也是一个合法的变量名，它是变量jQuery的别名：
window.jQuery; // jQuery(selector, context)
window.$; // jQuery(selector, context)
$ === jQuery; // true
typeof($); // 'function'
$本质上就是一个函数，但是函数也是对象，于是$除了可以直接调用外，也可以有很多其他属性。

注意，你看到的$函数名可能不是jQuery(selector, context)，因为很多JavaScript压缩工具可以对函数名和参数改名，所以压缩过的jQuery源码$函数可能变成a(b, c)。
绝大多数时候，我们都直接用$（因为写起来更简单嘛）。但是，如果$这个变量不幸地被占用了，而且还不能改，那我们就只能让jQuery把$变量交出来，然后就只能使用jQuery这个变量：
$; // jQuery(selector, context)
jQuery.noConflict();
$; // undefined
jQuery; // jQuery(selector, context)
这种黑魔法的原理是jQuery在占用$之前，先在内部保存了原来的$,调用jQuery.noConflict()时会把原来保存的变量还原。

学习笔记：
1.$符号在引入jQuery之前被其他变量占用，可使用上面一段代码来将其更换为用$来表示jQuery的目的。
2.jQuery是一个全局变量，封装了全部功能。


选择器

1.按ID查找
书写方式：$('#dom-id')
目的：帮助我们快速定位到一个或多个DOM节点。
例子：
	//查找<div id="abc">;
	var div=$('#abc');
	注：#abc以#开头。返回的对象是jQuery对象。
什么是jQuery对象？————jQuery对象类似数组，它的每个元素都是一个引用了DOM节点的对象。
以上面的查找为例，如果id为abc的<div>存在，返回的jQuery对象如下：
[<div id="abc">...</div>]
如果id为abc的<div>不存在，返回的jQuery对象如下：
[]
总之jQuery的选择器不会返回undefined或者null，这样的好处是你不必在下一行判断if (div === undefined)。

2.按tag查找
书写方式：$('tagname');
例如：
	var ps=$('p');  //返回所有<p>节点
	ps.length;      //数一数页面有多少个<p>节点

3.按class查找
书写方式：$('.classname');
注：按class查找注意在class名称前加一个点号 . 。
例如： 
	var a=$('.red');    //所有节点包含class="red"都将返回
	//例如
	//<div class="red"> ... </div>
	//<p class="green red">  ...  </p>
通常很多节点有多个class，我们可以查找同时包含red和green的节点：
	var a=$('.red.green');        //注意没有空格！
	//符合条件的节点：
	//<div class="red green">  ...  </div>
	//<div class="blue green red">  ...    </div>
	
4.按属性查找
书写方式：$('[name=stylename]');
例如：   
	//在一个表单中按属性来查找
	var email = $('[name=email]');
	var passwordInput = $('[type=password]');
	var a = $('[items="A B"]');
注：当属性的值包含空格等特殊字符时，需要用双引号括起来。

5.按属性查找还可以使用前缀查找或者后缀查找：
	var icons = $('[name^=icon]');   //找出所有name属性值以icon开头的DOM
	//例如：name="icon-1"  ,  name="icon-2"
	var names = $('[name$=with]');   //找出所有name属性值以with结尾的DOM
	//例如：name="startwith"   ,   name="endwith"
注：这个方法尤其适合通过class属性查找，且不受class包含多个名称的影响：
	var icons = $('[class^="icon-"]'); // 找出所有class包含至少一个以`icon-`开头的DOM
	// 例如: class="icon-clock", class="abc icon-home"
	
6.组合查找
组合查找就是把上述简单选择器组合起来使用。如果我们查找$('[name=email]')，很可能把表单外的<div name="email">也找出来，但我们只希望查找<input>，就可以这么写：
	var emailInput = $('input[name=email]'); // 不会找出<div name="email">
同样的，根据tag和class来组合查找也很常见：
	var tr = $('tr.red'); // 找出<tr class="red ...">...</tr>

7.多项选择器
多项选择器就是把多个选择器用,组合起来一块选：
	$('p,div'); // 把<p>和<div>都选出来
	$('p.red,p.green'); // 把<p class="red">和<p class="green">都选出来
注意：选出来的元素是按照它们在HTML中出现的顺序排列的，而且不会有重复元素。
		例如，<p class="red green">不会被上面的$('p.red,p.green')选择两次。	
